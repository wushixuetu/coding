1,介绍
	TestNG is a testing framework designed to simplify a broad range of testing needs, from unit testing (testing a class in isolation of the others) to integration testing (testing entire systems made of several classes, several packages and even several external frameworks, such as application servers).
	TestNG是一个测试框架，旨在简化广泛的测试需求，从单元测试(单独测试一个类)到集成测试(测试由几个类、几个包甚至几个外部框架组成的整个系统,比如应用服务器)
	Writing a test is typically a three-step process:
	编写一个测试通常是一个三步过程:
		Write the business logic of your test and insert TestNG annotations in your code.
		1.编写测试的业务逻辑，并在代码中插入TestNG注释。
		Add the information about your test (e.g. the class name, the groups you wish to run, etc...) in a testng.xml file or in build.xml.
		2.在testng.xml或在build.xml文件中添加关于您的测试的信息(例如类名、您希望运行的组、等等。)
		Run TestNG.
		3.运行
	A TestNG test can be configured by @BeforeXXX and @AfterXXX annotations which allows to perform some Java logic before and after a certain point, these points being either of the items listed above.
	一个TestNG测试可以通过@beforexxx和@afterxxx进行配置，它允许在某个点之前和之后执行一些Java逻辑，这些点是上面列出的项目中的一个。
	The rest of this manual will explain the following:
	本手册的其余部分将解释以下内容:
		A list of all the annotations with a brief explanation. This will give you an idea of the various functionalities offered by TestNG but you will probably want to consult the section dedicated to each of these annotations to learn the details.
		一个简短说明的所有注释的列表。这将使您了解TestNG提供的各种功能，但是您可能需要参考专用于这些注释的部分来了解详细信息。
		A description of the testng.xml file, its syntax and what you can specify in it.
		对testng.xml文件的描述，它的语法，以及您可以在其中指定的内容。
		A detailed list of the various features and how to use them with a combination of annotations and testng.xml.
		关于各种特性的详细列表，以及如何通过注释和testng.xml的组合来使用它们。
2.Annotations
	Here is a quick overview of the annotations available in TestNG along with their attributes.
	下面是TestNG中可用的注释及其属性的简要概述。
	@BeforeSuite: The annotated method will be run before all tests in this suite have run.
	带这个注释的方法将在这个套件的所有测试运行之前运行。
	@AfterSuite: The annotated method will be run after all tests in this suite have run.
	在这个套件中所有的测试运行之后，注释的方法将被运行。
	@BeforeTest: The annotated method will be run before any test method belonging to the classes inside the <test> tag is run. 
	带这个注释的方法将在<test>标签中所有类的测试方法之前运行。 
	@AfterTest: The annotated method will be run after all the test methods belonging to the classes inside the <test> tag have run. 
	带这个注释的方法将在<test>标签中所有类的测试方法之后运行。
	@BeforeGroups: The list of groups that this configuration method will run before. This method is guaranteed to run shortly before the first test method that belongs to any of these groups is invoked. 
	这个配置方法将在前面运行的组列表。该方法保证在调用这些组的第一个测试方法之前运行。
	@BeforeClass: The annotated method will be run before the first test method in the current class is invoked. 
	带这个注释的方法将在调用当前类的第一个测试方法之前运行。
	@AfterClass: The annotated method will be run after all the test methods in the current class have been run. 
	注释方法将在运行当前类的所有测试方法之后运行。
	@BeforeMethod: The annotated method will be run before each test method. 
	带注释的方法将在每个测试方法之前运行。
	@AfterMethod: The annotated method will be run after each test method.
	带注释的方法将在每个测试方法之后运行。
		Behaviour of annotations in superclass of a TestNG class
		TestNG类超类中的注释行为
		The annotations above will also be honored (inherited) when placed on a superclass of a TestNG class. This is useful for example to centralize test setup for multiple test classes in a common superclass.
		上面的注释也将被放在TestNG类的超类中(继承)。这很有用，例如在一个公共超类中对多个测试类集中测试设置。
		In that case, TestNG guarantees that the "@Before" methods are executed in inheritance order (highest superclass first, then going down the inheritance chain), and the "@After" methods in reverse order (going up the inheritance chain).
		在这种情况下，TestNG保证“@before”方法以继承顺序执行(首先是最高超类，然后是继承继承链)，然后是“@after”方法(向上继承继承链)。
		alwaysRun -- For before methods (beforeSuite, beforeTest, beforeTestClass and beforeTestMethod, but not beforeGroups): If set to true, this configuration method will be run regardless of what groups it belongs to. 
		对于之前的方法(be先兆，be先兆，前testclass和before testmethod，而不是前组):如果设置为true，这个配置方法将被运行，不管它属于哪个组。
		For after methods (afterSuite, afterClass, ...): If set to true, this configuration method will be run even if one or more methods invoked previously failed or was skipped.
		对于after方法(afterSuite、afterClass、…):如果设置为true，那么即使调用先前失败或跳过的一个或多个方法，也会运行该配置方法。
		dependsOnGroups -- The list of groups this method depends on.
		这个方法的组列表依赖于。
		dependsOnMethods -- The list of methods this method depends on.
		这个方法所依赖的方法列表。
		enabled -- Whether methods on this class/method are enabled.
		是否启用了这个类/方法的方法。
		groups -- The list of groups this class/method belongs to.
		这个类/方法的组列表属于。
		inheritGroups -- If true, this method will belong to groups specified in the @Test annotation at the class level.
		如果是正确的，这个方法将属于在类级别的@test注释中指定的组。
	@DataProvider -- Marks a method as supplying data for a test method. The annotated method must return an Object[][] where each Object[] can be assigned the parameter list of the test method. The @Test method that wants to receive data from this DataProvider needs to use a dataProvider name equals to the name of this annotation.
    标记一种为测试方法提供数据的方法。带注释的方法必须返回一个对象，其中每个对象都可以被分配测试方法的参数列表。想要从这个DataProvider接收数据的@test方法需	   要使用一个DataProvider名称等于这个注释的名称。
		name -- The name of this data provider. If it's not supplied, the name of this data provider will automatically be set to the name of the method.
		这个数据提供者的名字。如果没有提供，这个数据提供程序的名称将自动被设置为该方法的名称。
		parallel -- 如果设置为true，使用此数据提供程序生成的测试将并行运行。默认值是错误的。
	@Factory -- Marks a method as a factory that returns objects that will be used by TestNG as Test classes. The method must return Object[].
	将一个方法标记为一个工厂，该方法返回TestNG作为测试类使用的对象。该方法必须返回对象。
	@Listeners -- Defines listeners on a test class.
	在测试类中定义侦听器。
		value -- An array of classes that extend org.testng.ITestNGListener.
		一个类,扩展org.testng.ITestNGListener数组。
	@Parameters -- Describes how to pass parameters to a @Test method.
	描述如何将参数传递给@test方法。
		value -- The list of variables used to fill the parameters of this method.
		用于填充该方法参数的变量列表。
	@Test -- Marks a class or a method as part of the test.
	将类或方法标记为测试的一部分。
	alwaysRun -- If set to true, this test method will always be run even if it depends on a method that failed.
	如果设置为true，这个测试方法将始终运行，即使它依赖于失败的方法。
	dataProvider -- The name of the data provider for this test method.
	这个测试方法的数据提供程序的名称。
	dataProviderClass -- The class where to look for the data provider. If not specified, the data provider will be looked on the class of the current test method or one of its base classes. If this attribute is specified, the data provider method needs to be static on the specified class.
	查找数据提供程序的类。如果没有指定，数据提供者将被查看当前测试方法的类或它的一个基类。如果指定了该属性，则数据提供者方法需要在指定的类上保持静态。
	dependsOnGroups -- The list of groups this method depends on. 
	这个方法的组列表依赖于。
	dependsOnMethods -- The list of groups this method depends on.
	这个方法的组列表依赖于。
	description -- The description for this method.
	这个方法的描述。
	enabled -- Whether methods on this class/method are enabled.
	是否启用了这个类/方法的方法。
	expectedExceptions -- The list of exceptions that a test method is expected to throw. If no exception or a different than one on this list is thrown, this test will be marked a failure.
	测试方法被期望抛出的异常列表。如果抛出这个列表中没有一个异常或一个不同的，这个测试将被标记为一个失败。
	groups -- The list of groups this class/method belongs to.
	这个类/方法的组列表属于。
	invocationCount --	The number of times this method should be invoked.
	应该调用该方法的次数。
	invocationTimeOut -- The maximum number of milliseconds this test should take for the cumulated time of all the invocationcounts. This attribute will be ignored if invocationCount is not specified.
	这个测试的最大毫秒数应该在所有的调用计数的累积时间内。如果没有指定调用计数，这个属性将被忽略。
	priority -- The priority for this test method. Lower priorities will be scheduled first.
	这个测试方法的优先级。较低的优先级将优先安排。
	successPercentage -- The percentage of success expected from this method
	从这个方法中获得的成功的百分比
	singleThreaded -- If set to true, all the methods on this test class are guaranteed to run in the same thread, even if the tests are currently being run with parallel="methods". This attribute can only be used at the class level and it will be ignored if used at the method level. Note: this attribute used to be called sequential (now deprecated).
	如果设置为true，那么这个测试类中的所有方法都将保证在同一个线程中运行，即使当前测试是用并行=“方法”运行的。这个属性只能在类级别使用，如果在方	 法级别使用，它将被忽略。注意:这个属性过去被称为序列(现在已被弃用)。
	
	
